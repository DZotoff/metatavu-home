/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VacationRequestStatus,
} from '../models/index';
import {
    VacationRequestStatusFromJSON,
    VacationRequestStatusToJSON,
} from '../models/index';

export interface CreateVacationRequestStatusRequest {
    vacationRequestStatus: VacationRequestStatus;
    id: string;
}

export interface DeleteVacationRequestStatusRequest {
    id: string;
    statusId: string;
}

export interface FindVacationRequestStatusRequest {
    id: string;
    statusId: string;
}

export interface ListVacationRequestStatusesRequest {
    id: string;
}

export interface UpdateVacationRequestStatusRequest {
    vacationRequestStatus: VacationRequestStatus;
    id: string;
    statusId: string;
}

/**
 * 
 */
export class VacationRequestStatusApi extends runtime.BaseAPI {

    /**
     * Add new vacation request status
     * Post a new vacation request status
     */
    async createVacationRequestStatusRaw(requestParameters: CreateVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequestStatus>> {
        if (requestParameters.vacationRequestStatus === null || requestParameters.vacationRequestStatus === undefined) {
            throw new runtime.RequiredError('vacationRequestStatus','Required parameter requestParameters.vacationRequestStatus was null or undefined when calling createVacationRequestStatus.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createVacationRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationRequests/{id}/statuses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VacationRequestStatusToJSON(requestParameters.vacationRequestStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestStatusFromJSON(jsonValue));
    }

    /**
     * Add new vacation request status
     * Post a new vacation request status
     */
    async createVacationRequestStatus(requestParameters: CreateVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequestStatus> {
        const response = await this.createVacationRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a vacation requests status.
     * Delete a vacation request status.
     */
    async deleteVacationRequestStatusRaw(requestParameters: DeleteVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVacationRequestStatus.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling deleteVacationRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationRequests/{id}/statuses/{statusId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"statusId"}}`, encodeURIComponent(String(requestParameters.statusId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a vacation requests status.
     * Delete a vacation request status.
     */
    async deleteVacationRequestStatus(requestParameters: DeleteVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVacationRequestStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Finds persisted vacation request status
     * Finds vacation request status
     */
    async findVacationRequestStatusRaw(requestParameters: FindVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequestStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findVacationRequestStatus.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling findVacationRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationRequests/{id}/statuses/{statusId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"statusId"}}`, encodeURIComponent(String(requestParameters.statusId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestStatusFromJSON(jsonValue));
    }

    /**
     * Finds persisted vacation request status
     * Finds vacation request status
     */
    async findVacationRequestStatus(requestParameters: FindVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequestStatus> {
        const response = await this.findVacationRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List vacation requests statuses
     * List vacation requests statuses
     */
    async listVacationRequestStatusesRaw(requestParameters: ListVacationRequestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VacationRequestStatus>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listVacationRequestStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationRequests/{id}/statuses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VacationRequestStatusFromJSON));
    }

    /**
     * List vacation requests statuses
     * List vacation requests statuses
     */
    async listVacationRequestStatuses(requestParameters: ListVacationRequestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VacationRequestStatus>> {
        const response = await this.listVacationRequestStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update vacation request status
     * Updates vacation request status
     */
    async updateVacationRequestStatusRaw(requestParameters: UpdateVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequestStatus>> {
        if (requestParameters.vacationRequestStatus === null || requestParameters.vacationRequestStatus === undefined) {
            throw new runtime.RequiredError('vacationRequestStatus','Required parameter requestParameters.vacationRequestStatus was null or undefined when calling updateVacationRequestStatus.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVacationRequestStatus.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling updateVacationRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationRequests/{id}/statuses/{statusId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"statusId"}}`, encodeURIComponent(String(requestParameters.statusId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VacationRequestStatusToJSON(requestParameters.vacationRequestStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestStatusFromJSON(jsonValue));
    }

    /**
     * Update vacation request status
     * Updates vacation request status
     */
    async updateVacationRequestStatus(requestParameters: UpdateVacationRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequestStatus> {
        const response = await this.updateVacationRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
