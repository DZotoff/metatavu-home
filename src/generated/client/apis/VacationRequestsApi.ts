/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VacationRequest,
} from '../models/index';
import {
    VacationRequestFromJSON,
    VacationRequestToJSON,
} from '../models/index';

export interface CreateVacationRequestRequest {
    vacationRequest: VacationRequest;
}

export interface DeleteVacationRequestRequest {
    id: string;
}

export interface FindVacationRequestRequest {
    id: string;
}

export interface ListVacationRequestsRequest {
    personId?: string;
    before?: Date;
    after?: Date;
}

export interface UpdateVacationRequestRequest {
    vacationRequest: VacationRequest;
    id: string;
}

/**
 * 
 */
export class VacationRequestsApi extends runtime.BaseAPI {

    /**
     * Add new vacation request
     * Post a new vacation request
     */
    async createVacationRequestRaw(requestParameters: CreateVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequest>> {
        if (requestParameters.vacationRequest === null || requestParameters.vacationRequest === undefined) {
            throw new runtime.RequiredError('vacationRequest','Required parameter requestParameters.vacationRequest was null or undefined when calling createVacationRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationsRequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VacationRequestToJSON(requestParameters.vacationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestFromJSON(jsonValue));
    }

    /**
     * Add new vacation request
     * Post a new vacation request
     */
    async createVacationRequest(requestParameters: CreateVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequest> {
        const response = await this.createVacationRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a vacation request.
     * Delete a vacation request.
     */
    async deleteVacationRequestRaw(requestParameters: DeleteVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVacationRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationsRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a vacation request.
     * Delete a vacation request.
     */
    async deleteVacationRequest(requestParameters: DeleteVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVacationRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Finds persisted vacation request
     * Finds vacation request
     */
    async findVacationRequestRaw(requestParameters: FindVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findVacationRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationsRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestFromJSON(jsonValue));
    }

    /**
     * Finds persisted vacation request
     * Finds vacation request
     */
    async findVacationRequest(requestParameters: FindVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequest> {
        const response = await this.findVacationRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists persisted vacation requests
     * List vacation requests
     */
    async listVacationRequestsRaw(requestParameters: ListVacationRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VacationRequest>>> {
        const queryParameters: any = {};

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString().substring(0,10);
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationsRequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VacationRequestFromJSON));
    }

    /**
     * Lists persisted vacation requests
     * List vacation requests
     */
    async listVacationRequests(requestParameters: ListVacationRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VacationRequest>> {
        const response = await this.listVacationRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update vacation request
     * Updates vacation request
     */
    async updateVacationRequestRaw(requestParameters: UpdateVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VacationRequest>> {
        if (requestParameters.vacationRequest === null || requestParameters.vacationRequest === undefined) {
            throw new runtime.RequiredError('vacationRequest','Required parameter requestParameters.vacationRequest was null or undefined when calling updateVacationRequest.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVacationRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/vacationsRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VacationRequestToJSON(requestParameters.vacationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VacationRequestFromJSON(jsonValue));
    }

    /**
     * Update vacation request
     * Updates vacation request
     */
    async updateVacationRequest(requestParameters: UpdateVacationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VacationRequest> {
        const response = await this.updateVacationRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
