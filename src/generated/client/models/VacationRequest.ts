/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VacationType } from './VacationType';
import {
    VacationTypeFromJSON,
    VacationTypeFromJSONTyped,
    VacationTypeToJSON,
} from './VacationType';

/**
 * Person's single vacation request
 * @export
 * @interface VacationRequest
 */
export interface VacationRequest {
    /**
     * ID of vacation request in UUID
     * @type {string}
     * @memberof VacationRequest
     */
    id?: string;
    /**
     * Person keycloak ID in UUID
     * @type {string}
     * @memberof VacationRequest
     */
    personId?: string;
    /**
     * Date of vacation start
     * @type {Date}
     * @memberof VacationRequest
     */
    startDate: Date;
    /**
     * Date of vacation end
     * @type {Date}
     * @memberof VacationRequest
     */
    endDate: Date;
    /**
     * Vacation days used for requested vacation
     * @type {number}
     * @memberof VacationRequest
     */
    days: number;
    /**
     * 
     * @type {VacationType}
     * @memberof VacationRequest
     */
    type: VacationType;
    /**
     * Message attached to request
     * @type {string}
     * @memberof VacationRequest
     */
    message: string;
    /**
     * ID of person who created status in UUID
     * @type {string}
     * @memberof VacationRequest
     */
    createdBy?: string;
    /**
     * Date time of vacation request registration
     * @type {Date}
     * @memberof VacationRequest
     */
    createdAt: Date;
    /**
     * Date time of vacation request update
     * @type {Date}
     * @memberof VacationRequest
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the VacationRequest interface.
 */
export function instanceOfVacationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "days" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function VacationRequestFromJSON(json: any): VacationRequest {
    return VacationRequestFromJSONTyped(json, false);
}

export function VacationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): VacationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'personId': !exists(json, 'personId') ? undefined : json['personId'],
        'startDate': (new Date(json['startDate'])),
        'endDate': (new Date(json['endDate'])),
        'days': json['days'],
        'type': VacationTypeFromJSON(json['type']),
        'message': json['message'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function VacationRequestToJSON(value?: VacationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'personId': value.personId,
        'startDate': (value.startDate.toISOString().substring(0,10)),
        'endDate': (value.endDate.toISOString().substring(0,10)),
        'days': value.days,
        'type': VacationTypeToJSON(value.type),
        'message': value.message,
        'createdBy': value.createdBy,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

