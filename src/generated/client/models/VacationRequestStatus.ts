/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VacationRequestStatuses } from './VacationRequestStatuses';
import {
    VacationRequestStatusesFromJSON,
    VacationRequestStatusesFromJSONTyped,
    VacationRequestStatusesToJSON,
} from './VacationRequestStatuses';

/**
 * singular vacation request status
 * @export
 * @interface VacationRequestStatus
 */
export interface VacationRequestStatus {
    /**
     * ID of vacation request status in UUID
     * @type {string}
     * @memberof VacationRequestStatus
     */
    id?: string;
    /**
     * ID of vacation request in UUID
     * @type {string}
     * @memberof VacationRequestStatus
     */
    vacationRequestId?: string;
    /**
     * 
     * @type {VacationRequestStatuses}
     * @memberof VacationRequestStatus
     */
    status: VacationRequestStatuses;
    /**
     * Date of vacation start
     * @type {string}
     * @memberof VacationRequestStatus
     */
    message?: string;
    /**
     * Date time of status registration
     * @type {Date}
     * @memberof VacationRequestStatus
     */
    createdAt?: Date;
    /**
     * ID of person who created status in UUID
     * @type {string}
     * @memberof VacationRequestStatus
     */
    createdBy?: string;
    /**
     * Date time of status update
     * @type {Date}
     * @memberof VacationRequestStatus
     */
    updatedAt?: Date;
    /**
     * ID of person who updated status in UUID
     * @type {string}
     * @memberof VacationRequestStatus
     */
    updatedBy?: string;
}

/**
 * Check if a given object implements the VacationRequestStatus interface.
 */
export function instanceOfVacationRequestStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function VacationRequestStatusFromJSON(json: any): VacationRequestStatus {
    return VacationRequestStatusFromJSONTyped(json, false);
}

export function VacationRequestStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): VacationRequestStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'vacationRequestId': !exists(json, 'vacationRequestId') ? undefined : json['vacationRequestId'],
        'status': VacationRequestStatusesFromJSON(json['status']),
        'message': !exists(json, 'message') ? undefined : json['message'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
    };
}

export function VacationRequestStatusToJSON(value?: VacationRequestStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'vacationRequestId': value.vacationRequestId,
        'status': VacationRequestStatusesToJSON(value.status),
        'message': value.message,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'updatedBy': value.updatedBy,
    };
}

