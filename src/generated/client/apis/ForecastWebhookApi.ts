/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ForecastWebhookEvent,
} from '../models/index';
import {
    ForecastWebhookEventFromJSON,
    ForecastWebhookEventToJSON,
} from '../models/index';

export interface ForecastWebhookRequest {
    forecastWebhookEvent: ForecastWebhookEvent;
    forecastWebhookKey: string;
}

/**
 * 
 */
export class ForecastWebhookApi extends runtime.BaseAPI {

    /**
     * This endpoint handles webhook notifications from Forecast.it API
     * Handle deleted time entries from Forecast API
     */
    async forecastWebhookRaw(requestParameters: ForecastWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.forecastWebhookEvent === null || requestParameters.forecastWebhookEvent === undefined) {
            throw new runtime.RequiredError('forecastWebhookEvent','Required parameter requestParameters.forecastWebhookEvent was null or undefined when calling forecastWebhook.');
        }

        if (requestParameters.forecastWebhookKey === null || requestParameters.forecastWebhookKey === undefined) {
            throw new runtime.RequiredError('forecastWebhookKey','Required parameter requestParameters.forecastWebhookKey was null or undefined when calling forecastWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.forecastWebhookKey !== undefined) {
            queryParameters['forecastWebhookKey'] = requestParameters.forecastWebhookKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/forecastWebhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastWebhookEventToJSON(requestParameters.forecastWebhookEvent),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint handles webhook notifications from Forecast.it API
     * Handle deleted time entries from Forecast API
     */
    async forecastWebhook(requestParameters: ForecastWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forecastWebhookRaw(requestParameters, initOverrides);
    }

}
